<%doc>

=head1 NAME 
 
 expression_info.mas
 A mason component to create html code with expression data associated to an unigene

=cut

=head1 VERSION 

0.1

=cut 

=head1 SYNOPSIS

<& '/transcript/unigene/expression_info.mas', schema => $schema, unigene => $unigene &>

where: $schema is a schema object with Bio::Chado::Schema, CXGN::Metadata::Schema and CXGN::Biosource::Schema and 
               CXGN::GEM::Schema classes)
       $unigene, an CXGN::Transcript::Unigene object
       
=cut

=head1 DESCRIPTION

  Mason component get the unigene data (expression info) from the database and show it as table web_page.
 
  There are two sources of expression data. The microarray TOM1 and the GEM system. 

  This script search in both and take them as different objects.

=cut
 
=head 1 AUTHOR
 
 Aureliano Bombarely (ab782@cornell.edu)

=cut  

</%doc>


<%args>
$schema
$unigene
</%args>



<%once>
use strict;
use warnings;
use Math::BigFloat;
use CXGN::GEM::Template;
use CXGN::GEM::Experiment;
use CXGN::GEM::Expression;
use CXGN::Page::FormattingHelpers  qw/ info_section_html info_table_html columnar_table_html page_title_html html_break_string /;
</%once>
<%perl>
## Get the object
my $id = $unigene->get_unigene_id();

my $expression_html;
my @template_ids;

my $default_message = '<span class="ghosted">data not available</span>';

if (defined $id) {

   ## First, get the microarray data for TOM1 using old functions
  
   my @tom;
   my @tom_microarray_data = $unigene->get_microarray_info();

   foreach my $tom_match (@tom_microarray_data) { 
    
       if (!defined($tom_match->{read_dir})) {
           $tom_match->{read_dir} = "<span class=\"ghosted\">Unknown</span>";
       } elsif ($tom_match->{read_dir} eq "+") {
           $tom_match->{read_dir} = "5'";
       } else {
           $tom_match->{read_dir} = "3'";
       }
    
       my $clone_accession = "SGN-C".$tom_match->{clone_id};
       
       my $est_id = $tom_match->{est_id};
       my $est_link = qq|<a href="/search/est.pl?request_id=$est_id&request_from=1&request_type=7">SGN-E$est_id</a>|;
       my $read_dir = $tom_match->{read_dir};
       my $chip_name = $tom_match->{chip_name};
       my $prespot_id = $tom_match->{release} . "-" . $tom_match->{version} . "-" . $tom_match->{spot_id};
       my $spot_id = $prespot_id . $tom_match->{content_specific_tag};
       
       my $order_info = qq|<a href="http://ted.bti.cornell.edu/cgi-bin/TFGD/order/home.cgi">Order&nbsp;Array</a>|;
       my $ted_link = '<a href=';
       $ted_link .= "http://ted.bti.cornell.edu/cgi-bin/TFGD/array_data/probe_expression.cgi?array_ID=A01&probe_ID=$prespot_id";
       $ted_link .= '>TMD</a>';
       
       push @tom, [ $clone_accession, $est_link, $read_dir, $chip_name, $spot_id, $order_info, $ted_link];
       push @template_ids, $spot_id;
   }
      
   ## Second, put the data into a table 

   if (defined $tom[0]) {
       my $tom_resources_html = columnar_table_html(
           headings => [qw/ SGN-C  SGN-E  Dir.  Chip  SpotID  Order Info/],
           data     => \@tom,
           __border => 0,
          );
         
       ## For this case will not give any message if there aren't any tom1 data.

       my $tom1_name = 'TOM1 data for Unigene: SGN-U' . $id;
       $expression_html .= info_table_html (    $tom1_name   => $tom_resources_html,  
                                                __border     => 1,
                                                __tableattrs => qq{width="700" height="100"});
 
    }

   ## Now it will take the expression data for GEM system
   ## It will take the expression data before, put into a hashes and after that order and print into a columnar table

   ## It will store the data as three hashes: 
   ## %template_html_hash = ( $template_name => $template_html )
   ## %platform_html_hash = ( $template_name => $platform_html )
   ## %experiment_hash = ( $template_name => { $experiment_name => $expression_data_aref } )
	 
   my (%template_html_h, %platform_html_h, %experiment_html_h);  
   
   my ($dbipath_row) = $schema->resultset('MdDbipath')
                              ->search( 
                                         { 
 					  column_name => 'unigene_id',
 					  table_name  => 'unigene',
 					} 
 			              );

   my $dbiref_id;
   my $exp_number = 0;
   
   if (defined $dbipath_row) {
       
       my ($dbiref_row) = $schema->resultset('MdDbiref')
 	                         ->search( 
 	                                   { 
 					      iref_accession => $id,
 					      dbipath_id     => $dbipath_row->get_column('dbipath_id'),
 					   } 
 				         );
        if (defined $dbiref_row) {
 	   $dbiref_id = $dbiref_row->get_column('dbiref_id');
        }
   }

   my $exp_resources_html;
   
   if (defined $dbiref_id) {
       
       my @template_dbiref_rows = $schema->resultset('GeTemplateDbiref')
                                         ->search( { dbiref_id => $dbiref_id } );
 
       foreach my $template_dbiref_row (@template_dbiref_rows) {

	   $exp_resources_html .= '<br>';
	   
           ## Get template data and create a template object
	   
	   my $template_id = $template_dbiref_row->get_column('template_id');
	   my $template = CXGN::GEM::Template->new($schema, $template_id);
	   my $template_name = $template->get_template_name();
	   my $template_html = '<b><a href=/gem/template.pl?id=' . $template_id . '>' . $template_name . '</a></b><br>'; 

	   push @template_ids, $template_id; ## To count how many templates are associated to this unigene

	   $template_html_h{$template_name} = $template_html; 

	   ## Get platform object using the template object

	   my $platform = $template->get_platform();
	   my $platform_id = $platform->get_platform_id();
	   my $platform_name = $platform->get_platform_name();
	   my $platform_html = '<a href=/gem/platform.pl?id=' . $platform_id . '>' . $platform_name . '</a><br>'; 

	   $platform_html_h{$template_name} = $platform_html;

	   my $expression = CXGN::GEM::Expression->new($schema, $template_id);       
	   my %experiments = $expression->get_experiment();
	   $exp_number = scalar(keys %experiments);
	   
	   ## Get the experimental design for each emxperiment to link it

	   my %expdesigns = ();
	   my @experiments = $expression->get_experiment_object();
	   foreach my $exp_obj (@experiments) {
	       my $expdesign = $exp_obj->get_experimental_design();
	       my $expdesign_name = $expdesign->get_experimental_design_name();
	       $expdesigns{$expdesign_name} = $expdesign;
	   }
	   
	   my $expdesign_html;
	   foreach my $expdes_name (sort keys %expdesigns) {
	       my $expdesign_id = $expdesigns{$expdes_name}->get_experimental_design_id();
	       $expdesign_html .= '<a href=/gem/experimental_design.pl?id=' . $expdesign_id . '>' . $expdes_name . '</a>';
	   }

	   ## Add these data as a table

	   my $basic_info_content = <<HTML;

	   <table width="100%">
	       <tr> <td width="25%"> <b>Template: </b>                       </td> <td> $template_html </td></tr>
	       <tr> <td width="25%"> <b>Platform: </b>                       </td> <td> $platform_html </td></tr>
	       <tr> <td width="25%"> <b>Experimental Design: </b>            </td> <td> $expdesign_html </td></tr>
	   </table>
HTML

          $exp_resources_html .= $basic_info_content;

	   ## Show graph only if there is any experiment (expression data)

	   my $experiment_html = "<br>No expression data was found for template: $template_name<br>";
	   if (scalar(keys %experiments) > 0) {

	       my ($tempfile, $tempuri) = $c->tempfile( TEMPLATE => ['expression', 'templexp-XXXXXX'],
                                                        SUFFIX   => '.png',
                                                      );

	       my $cc = $expression->get_experiment_graph({
                          x_axis_sort => 'alphabetical',
                       });
	       $cc->write_output($tempfile);

	       $experiment_html = qq|<img style="display: block; margin: 0 auto;" src="$tempuri" />|
	   }

	   $exp_resources_html .= $experiment_html;
       }
   }
   
   if ($exp_number > 0 && defined $exp_resources_html) {

       my $exp_name = 'Expression data for Unigene: SGN-U' . $id;
       $expression_html .= info_table_html (    $exp_name    => $exp_resources_html,  
		  			        __border     => 1,
					        __tableattrs => qq{width="700" height="100"});

   }
 
}

## If there are not any expression data, it will rewrite the message

my $template_nr = scalar(@template_ids);
 
if ($template_nr == 0) {
    $expression_html = '<span class="ghosted">No expression data was found associated to this unigene</span>';
}

my $expression_content = info_section_html( title      => "Expression Data (" . $template_nr . ")", 
                                           contents    => $expression_html,
					   collapsible => 1,
					   collapsed   => 1);

</%perl>

<% $expression_content %>
