<%doc>

=head1 NAME 
 
 portein_prediction.mas
 Mason component to show the protein prediction

=cut

=head1 VERSION 

0.1

=cut 

=head1 SYNOPSIS

<& '/transcript/unigene/protein_prediction_info.mas', 
 schema => $schema, unigene => $unigene, basepath => $basepath, temp_dir => $temp_dir &>

where: $schema is a schema object with Bio::Chado::Schema, CXGN::Metadata::Schema and CXGN::Biosource::Schema classes
       $unigene, an CXGN::Transcript::Unigene object
       $basepath and $temp_dir are vhost configuration arguments transmited to protein_prediction_info.mas component 
       
=cut

=head1 DESCRIPTION

  Another piece of mason code get the unigene data (protein prediction info) from the database and show it 
  as table web_page; 
                
  This code was taken from unigene.pl (this part was made by Chenwei in June 30, 2005)

=cut
 
=head 1 AUTHOR
 
 Aureliano Bombarely (ab782@cornell.edu)

=cut  

</%doc>


<%args>
$schema
$unigene
$basepath
$temp_dir
</%args>


<%perl>
use strict;
use warnings;

use CXGN::Phylo::Alignment;
use File::Temp;
use File::Spec;
use CXGN::Page::FormattingHelpers  qw/ info_section_html info_table_html columnar_table_html page_title_html html_break_string /;

my ($library_content, $library_html, @library_table);


## Get the object
my $id =  $unigene->get_unigene_id();

## If there aren't any unigene that comes from unigene_detail.mas, it will not do anything because the error message is given for the
## basic_detail.mas script

## The protein prediction analysis will be divided into two sections based in the protein predicted. Protein predicted and domains.

my $protein_html_content;

if (defined $id) {

    my $protein_content;

    ## First, get the cds.
    
    my @cds = $unigene->get_cds_list();

    my $protein_seq;
   
    foreach my $cds (@cds) { 
	$protein_seq  = $cds->get_protein_seq();
	my $protein_seq_formated = $protein_seq;
	$protein_seq_formated =~ s/\*//;
	my $protein_length = length($protein_seq_formated);
	my $protein_id = 'SGN-P'.$cds->get_cds_id();
	my $cds_seq = $cds->get_cds_seq();
	my $direction = $cds->get_direction();
	my $method = $cds->get_method();
	my $frame = undef;                          ### Estscan has score and longest6frame has associated frame
	my $score = undef;

	my $preferred = $cds->get_preferred() || 'none preferred analysis was done';

	if ($method eq "estscan") { 
	    $score=$cds->get_score();
	} else { 
	    $frame = $cds->get_frame();
	}

     if (!$protein_seq){
         $protein_content = 'No coding sequence identified.';
     } else {
	 my $method_text = "longest six frame method";  ## Message acording the protein prediction method
	 if ($method eq "estscan") {                               ## Estscan has a linked page with more results
             $method_text = "ESTScan";
	     $method_text .= qq| [<a style="line-height: 2" href="unigene-estscan-detail.pl?unigene_id=$id" target="blank">|;
	     $method_text .= qq| Show ESTScan Detail</a>]|;
	 }
	 if ($preferred eq 't') {
	     $method_text .= " <br>(<i>preferred protein</i> for the protein prediction methods) ($preferred)";
	 }
         $protein_content .= "<b>Prediction based on $method_text</b>\n <br><br>\>$protein_id ($protein_length Aa)<br>";
         my $i=0;
         my $protein_display = '';
	 my ($nn_d, $nn_ypos, $nn_score) = $cds->get_signalp_info();    ## Get Signal-P info to link with the protein info
         if($nn_d eq 'Y') { $protein_display .= "<span style='color:green'>"; }
         while ((length($protein_seq) - $i)>90) {
             if($nn_d eq 'Y' and $i==0) {
                 $protein_display .= substr($protein_seq, 0, $nn_ypos-1) . "</span>";
		 $protein_display .= substr($protein_seq, $nn_ypos-1, 90-$nn_ypos+1)."<br />\n";
	     }
	     else {
		 $protein_display .= substr($protein_seq, $i, 90) . "<br />\n";
	     }
	     $i += 90;
	 }
	 $protein_display .= substr($protein_seq, $i) . "\n";
	 $protein_content .=qq|<div class="fix" align="left">$protein_display</div>\n|;
	 if($nn_d){
             $protein_content .= "<br />\n<div style='text-align:left'>";
	     if($nn_d eq 'Y'){
		 $protein_content .= "SignalP predicts <b>secretion</b> with a score of $nn_score";
	     }
	     elsif($nn_d eq 'N') {
		 $protein_content .= "SignalP predicts non-secretion with a score of $nn_score";
	     }
	     $protein_content .= "</div>";         
	 }
	 if (!$nn_d) { 
	     $protein_content .="<br /><span class=\"ghosted\">SignalP analysis not run for this sequence.</span>";
	 }
     }
    
	$protein_content = '<div>' . $protein_content . '</div>';


	## Now get the protein domain info
  
	my $ipr_content = "";
    
	my @interpro_domain_matches = $cds->get_interpro_domains();
    
	my %domain_matches_seq = ();
	my %domain_matches_description = ();
	foreach my $idm (@interpro_domain_matches) { 

	    my($ipr_accession, $ipr_description, $start, $end) = @$idm;
	    $domain_matches_description{$ipr_accession}=$ipr_description;
	    if (!defined $domain_matches_seq{$ipr_accession}) {
		$protein_seq =~ s/(\\)//g;
		$protein_seq =~ s/[A-Z]/-/gi; #first generate a sequence of all '-'
		$domain_matches_seq{$ipr_accession} = $protein_seq;
	    }
        
          #skip start and end coords that don't make sense
	    next unless $start <= $end && $start >= 0 && $end < length($protein_seq);
        
	    my $replace = 'X'x($end - $start + 1);
          
          ##replace the match domains with 'X', so that the domains an be displayed with Alignment.pm
	    substr($domain_matches_seq{$ipr_accession}, $start - 1, $end - $start + 1) = $replace; 
	}
    
  
	if(%domain_matches_description) {
        
	    #Generate an align object
	    my $domain_align = CXGN::Phylo::Alignment->new( align_name => 'ipr', 
							    width      => 500, 
							    height     => 2000, 
							    type       => 'pep' );
	    foreach (keys %domain_matches_seq) {
		my $len = length $domain_matches_seq{$_};
		my $member = CXGN::Phylo::Alignment::Member->new( horizontal_offset => 0,
								  vertical_offset   => 0,
								  length            => 400,
								  height            => 15,
								  start_value       => 1, 
								  end_value         => $len, 
	        						  id                => $_, 
								  seq               => $domain_matches_seq{$_}, 
								  species           => ' '
		                                                );
		$domain_align->add_member($member);
	    }
        
	    #Render image

	    my $tmp_image = new File::Temp( DIR    => File::Spec->catfile($basepath, $temp_dir),
					    SUFFIX => '.png',
					    UNLINK => 0,
		                          );
	    close $tmp_image;
	
	    $domain_align -> render_png_file($tmp_image, 'a');
	    $tmp_image =~ s/$basepath//;
        
	    $ipr_content = qq|<ul style="list-style: none">\n|;
	    foreach (keys %domain_matches_description){
		$ipr_content .= qq|<li><a href="http://www.ebi.ac.uk/interpro/entry/$_" target="blank">|;
		$ipr_content .= qq|$_</a>&nbsp;&nbsp;$domain_matches_description{$_}</li>\n|;
	    }
	    $ipr_content .= "</ul>\n";
	    $ipr_content .= "<center><img src=\"$tmp_image\" alt=\"\" /></center>\n";
	} 
	else {
	    $ipr_content = '<br /><span class="ghosted">No InterPro domain matches or not analyzed.</span><br /><br />';
	}

	$protein_content .=$ipr_content;
    }

    if (!@cds) { 
	$protein_content = '<span class="ghosted">No protein sequence available.</span>';
    }

    my $proteins_n = scalar(@cds);
    $protein_html_content = info_section_html( title        => "Protein prediction analysis (".$proteins_n.")", 
					       contents     => $protein_content,
					       collapsible  => 1,
					       collapsed    => 1, );
}


</%perl>

<% $protein_html_content %>
