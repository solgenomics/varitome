<%doc>

=head1 NAME

sequence/with_markup.mas - display a sequence formatted on the client
side with Text.Markup javascript

=head1 ARGS

=head2 seq

The L<Bio::PrimarySeqI> to display.

=head2 width

The width at which to line-break the sequence, default 80, set 0 or
undef to disable.

=head2 subdiv

The number of bases at which to subdivide the sequence into groups,
default 10, set 0 or undef to disable.

=head2 styles

Hashref of Text.Markup styles for use on the sequence.  Styles can be
either single strings, which will insert that string at the given
(single) coordinate, or arrayrefs of two strings that will be inserted
at either side of a region.  Note that this component will add 'break'
and 'space' styles to your styles if you don't already have them,
which are defined as in the example below.

Example styles definition:

 { methionine => ['<span class="methionine">','</span>'],
   stop_codon => ['<b>','</b>'],
   break      => '<br />',
   space      => ' ',
 }

=head2 regions

Text.Markup regions to apply the styles onto. Regions coordinates are
numbered using space-oriented coordinates, which means that start=0
means to insert in front of the first base pair, and an end equal to
the sequence length will insert after the last base pair:

  0 1 2 3 4 5 6 7     perl string coordinates (0-based)
  1 2 3 4 5 6 7 8     sequence coordinates    (1-based)
  g a t c g a t c     sequence
 0 1 2 3 4 5 6 7 8    space coordinates

Example regions (using example styles above):

  [ ['methionine', 23,24], #< highlight the single base at index 23
                           #< (the 24th base) with the methionine style

    ['orf', 23,54 ],       #< highlight bases 24-54 with the ORF style

    ['break', 43 ],        #< insert the string from the 'break' style before
                           #< the 44th base
  ]

=head2 blast_url

If passed, will provide a 'BLAST' button that will POST the sequence
to the given URL as `seq`

=cut

</%doc>

<%args>
  $seq
</%args>

% if( $seq->length > 50_000 ) {
    <span class="sequence">
      ><% $seq->id %> <% $seq->desc %>
      <br /><span class="warning">Sequence too large to display.</span>
    </span>
% } else {
    <& .really_display, %ARGS &>
% }

<%def .really_display>

<%args>
  $seq
  $styles    => undef
  $regions   => undef
  $width     => 80
  $subdiv    => 10
  $blast_url => undef
</%args>

<%perl>
    use POSIX;

    #insert default space and break styles
    $styles ||= {};
    $styles->{space} ||= '<span style="margin: 0 0.5em"></span>';
    $styles->{break} ||= '<br />';

    #insert space and break regions
    $regions ||= [];
    if( $subdiv || $width ) {
        # break every $width bases, and also hash them to use for filtering the spaces
        my %breaks =
            !$width ? ()
                    : map { $_ *= $width; $_ => ['break',$_] }
                      1..POSIX::floor($seq->length/$width);
        push @$regions, values %breaks;

        # spaces every $subdiv bases, except where there is a break already
        push @$regions,
             !$subdiv ? ()
                      : map { $_ *= $subdiv; $breaks{$_} ? () : ['space',$_] }
                        1..POSIX::floor($seq->length/$subdiv);

    }
</%perl>

<span class="sequence">
  ><% $seq->id %> <% $seq->desc %>
% if( $blast_url ) {
    <form style="display: inline" method="post" action="<% $blast_url %>">
        <input type="hidden" name="seq" value="<% '>'.$seq->id."\n".$seq->seq | h %>" />
        <input style="padding: 1px; line-height: 0.8" type="submit" value="BLAST" />
    </form>
% }

  <br />
  <& /util/markup_string.mas,
     styles  => $styles,
     string  => $seq->seq,
     regions => $regions,
  &>
</span>

</%def>