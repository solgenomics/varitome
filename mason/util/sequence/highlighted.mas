<%doc>

=head1 NAME

/tools/sequence.mas - mason module to display a sequence, either as
fasta text or as nicely formatted html, with optional highlighting of
sub-regions.

=head1 ARGUMENTS

=over 5

=item seq

the sequence [Bio::Seq object]

=item title

the title of this section. Default is sequence id.

=item highlight_description

short plain-text description of the meaning of the highlighted regions,
defaults to 'matches'

=item highlight_coords

a list of ONE-BASED refs to start/end coords, [start, end], [start,
end], ...  Will be highlighted and sequence will be trimmed to show
only a window around these regions, unless whole_seq is set below.

=item whole_seq

Display the entire sequence, do not cut out windows around the
matches.  Default false.

=item width

width in characters to render the sequence, default 90

=item source

optional source name for the sequence, example "BLAST database such
and such", or "Tomato unigene build blah blah"

=item blast_url

Optional URL to which a sequence could be POSTed to pre-fill the BLAST
input form.

=back

=cut

</%doc>

<%args>
$title => undef
$seq
$highlight_description => 'matches'
$highlight_coords      => [ ]
$width     => 100
$source    => '<span class="ghosted">not recorded</span>'
$whole_seq => 0
$blast_url => undef
$collapsable => 0
$collapsed => 0
</%args>

<&| /page/info_section.mas, title => $title || $seq->id(), collapsible=> $collapsable, collapsed=> $collapsed &>

    <% info_table_html( 'Sequence ID' => link_identifier($seq->id) || $seq->id,
                        'Length'      => commify_number( $seq->length ),
                        'Source'      => $source,
                        __multicol    => 3,
                        __border      => 0,
			
                        )
    %>
    <% info_table_html( 'Description' => $seq->desc || '<span class="ghosted">none</span>',
                        highlighted_regions( $highlight_coords, $highlight_description ),
                        __border => 0,
                        )
    %>

    <div style="margin: 0.4em 0">&nbsp;</div>

%   for my $r ( @regions ) {
%       my $w = $r->{window};
%       my $highlight_count = sum map $_->end - $_->start +1, @{$r->{abs_ranges}};

        <&| /page/info_section.mas,
              title => "Residues ".commify_number( $w->start ).' - '.commify_number( $w->end ),
              is_subsection => 1,
              subtitle => commify_number( $w->end - $w->start + 1 ).' residues shown, '.commify_number( $highlight_count || 0 ).' highlighted',
         &>
%            my $wseq = $w->start == 1 && $w->end == $seq->length ? $seq : $seq->trunc( $w->start, $w->end );
%            if( $wseq->length > 200_000 ) {
                 <span class="ghosted">Region too large to display.</span>
%            } else {
                 <& /sequence/with_markup.mas,
                     width   => $width,
                     subdiv  => 10,
                     seq     => $wseq,
                     styles  => { highlight => [ '<span class="highlighted">', '</span>'] },
                     regions => [ map ['highlight', $_->start-1, $_->end], @{ $r->{rel_ranges} } ],
                     blast_url => $blast_url,
                 &>
%            }
       </&>
%    }

</&>

<%init>
  # sanitize the coords array (add 0 to all the numbers in it, forcing them to be purely numeric)
  my @highlight_coords = map [map $_+0, @$_], @$highlight_coords;

  # calculate the pieces of the sequence that we will display, and that we will highlight
  my @regions = seq_windows_and_ranges( $seq, \@highlight_coords, $width );

</%init>

<%once>
use List::Util qw/ min max sum /;
use List::MoreUtils qw/ minmax /;
use POSIX;
use Storable 'dclone';

use Bio::Range ();

use CXGN::Page::FormattingHelpers qw(
   info_table_html
  );

use CXGN::Tools::Identifiers qw/ link_identifier /;
use CXGN::Tools::Text qw/ commify_number /;

use constant LINE_WINDOW_EXPAND => 5;

sub coords_to_ranges {
    my ( $seq, $coords ) = @_;
    return
        map {
            Bio::Range->new( -start => max( 1, $_->[0]),
                             -end   => min( $seq->length, $_->[1] ),
                            )
        }
        sort { $a->[0] <=> $b->[0] }
        @$coords;
}

sub seq_windows_and_ranges {
    my ( $seq, $coords, $width ) = @_;

    unless ( $coords && @$coords ) {
        return {
            window     => Bio::Range->new( -start => 1, -end => $seq->length ),
            abs_ranges => [],
            rel_ranges => [],
        };
    }

    # change the coords into ranges and sort by start coord, also
    # clamping them to the sequence length if needed, and merge any
    # overlapping ranges
    my @ranges = Bio::Range->unions( coords_to_ranges( $seq, $coords ) );

    # calculate the windows of context for highlighted regions
    my @windows =
       # calculate 1-based non-overlapping ranges of *sequence* we will display
       sort { $a->start <=> $b->start }
       Bio::Range->unions(
           map {
               my $r = $_;
               my $match = Bio::Range->new(
                   -start => max( 0,
                                  ( POSIX::floor(($r->start-1)/$width) - LINE_WINDOW_EXPAND ),
                                ) * $width + 1,
                   -end   => min( $seq->length/$width,
                                  ( POSIX::floor(($r->end)/$width ) + 1 + LINE_WINDOW_EXPAND ),
                                ) * $width,
                  );
           } @ranges
       );

    # decorate the windows with the other things that are needed to render them
    return map {
        my $window = $_;

        # find ranges appicable to this window
        my @window_ranges =
            grep { $_->start >= $window->start && $_->end <= $window->end }
            @ranges;

        # make another set of ranges that are relative to the window
        my @rel_window_ranges = map {
            my $r = dclone $_;
            $r->start( $r->start - $window->start + 1 );
            $r->end(   $r->end   - $window->start + 1 );
            $r
        } @window_ranges;

        { window => $window, abs_ranges => \@window_ranges, rel_ranges => \@rel_window_ranges }
    } @windows;
}


sub highlighted_regions {
    my ( $coords, $highlight_description ) = @_;
    return unless $coords && @$coords;

    return
        "Highlighted Regions ($highlight_description)" =>
        join ', ',
        map "$_->[0]-$_->[1]",
        @$coords;
}

</%once>
