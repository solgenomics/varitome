
<%doc>

=head1 NAME

/markers/rflp.mas - a Mason component displaying information about rflp (known function genes) markers

=head1 ARGS

=head2 marker

a CXGN::Marker object.

=head1 AUTHOR

Robert Buels <rmb32@cornell.edu>

=cut

</%doc>

<%args>
$marker
</%args>

<%init>
use CXGN::Page::FormattingHelpers qw/ info_table_html columnar_table_html /;
use CXGN::Tools::Identifiers qw/ link_identifier /;
use SGN::Controller::Marker;

sub fmt_sequence {
  my $seq = shift
    or return '<span class="ghosted">not available</span>';
  '<span class="sequence">'.CXGN::Page::FormattingHelpers::html_break_string($seq,90).'</span>'
}
sub fmt_rflp_image_link {
    my $marker = shift;
    my $l = SGN::Controller::Marker->rflp_image_link( $c, $marker )
        or return '<span class="ghosted">'.$marker->get_name.' image not available</span>';
    return '<a href="/marker/SGN-M'.$marker->marker_id.'/rflp_image/view">'.$marker->get_name.' RFLP image</a>';
}
sub len_pct {
    my ($len,$seq) = @_;
    return sprintf('%d (%0.1f%% of RFLP seq)',$len,$len/length($seq)*100);
}

my $e_val_blast_cutoff = '1.0e-4';
</%init>

% if( my $r = $marker->rflp_data() ) {
%     my ($forward_unigene_matches, $reverse_unigene_matches) = $marker->rflp_unigene_matches( $r->{forward_seq_id}, $r->{reverse_seq_id} );

      <&| /page/info_section.mas, title=>'RFLP details' &>

         <% info_table_html( __border => 0, __multicol => 5,
              'Insert size'     => $r->{insert_size},
              'Vector'          => $r->{vector},
              'Cutting Site'    => $r->{cutting_site},
              'Drug Resistance' => $r->{drug_resistance},
              'Image'           => fmt_rflp_image_link( $marker ),              
         )%>
         <% info_table_html( __border => 0,
              'Forward sequence' => fmt_sequence( $r->{forward_seq} ),
              'Reverse sequence' => fmt_sequence( $r->{reverse_seq} ),
         )%>

      </&>
       <&| /page/info_section.mas, title => 'RFLP sequence matches to unigenes' &>
%          if( @$forward_unigene_matches || @$reverse_unigene_matches ) {
               <% columnar_table_html(
                      headings => ['Unigene','e value','Match length (bp)','Strand'],
                      data     => [
                                    ( map [ link_identifier($_->[0]), $_->[1], len_pct($_->[2], $r->{forward_seq}), '+' ], @$forward_unigene_matches ),
                                    ( map [ link_identifier($_->[0]), $_->[1], len_pct($_->[2], $r->{reverse_seq}), '-' ], @$reverse_unigene_matches ),
                                  ],
               )%>
%          }
       </&>

%}
